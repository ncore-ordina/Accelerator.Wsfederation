<?xml version="1.0"?>
<doc>
    <assembly>
        <name>IdentityServer3.WsFederation</name>
    </assembly>
    <members>
        <member name="T:IdentityServer3.WsFederation.Logging.ILog">
            <summary>
            Simple interface that represent a logger.
            </summary>
        </member>
        <member name="M:IdentityServer3.WsFederation.Logging.ILog.Log(IdentityServer3.WsFederation.Logging.LogLevel,System.Func{System.String},System.Exception,System.Object[])">
            <summary>
            Log a message the specified log level.
            </summary>
            <param name="logLevel">The log level.</param>
            <param name="messageFunc">The message function.</param>
            <param name="exception">An optional exception.</param>
            <param name="formatParameters">Optional format parameters for the message generated by the messagefunc. </param>
            <returns>true if the message was logged. Otherwise false.</returns>
            <remarks>
            Note to implementers: the message func should not be called if the loglevel is not enabled
            so as not to incur performance penalties.
            
            To check IsEnabled call Log with only LogLevel and check the return value, no event will be written.
            </remarks>
        </member>
        <member name="T:IdentityServer3.WsFederation.Logging.LogLevel">
            <summary>
            The log level.
            </summary>
        </member>
        <member name="T:IdentityServer3.WsFederation.Logging.ILogProvider">
            <summary>
            Represents a way to get a <see cref="T:IdentityServer3.WsFederation.Logging.ILog"/>
            </summary>
        </member>
        <member name="M:IdentityServer3.WsFederation.Logging.ILogProvider.GetLogger(System.String)">
            <summary>
            Gets the specified named logger.
            </summary>
            <param name="name">Name of the logger.</param>
            <returns>The logger reference.</returns>
        </member>
        <member name="M:IdentityServer3.WsFederation.Logging.ILogProvider.OpenNestedContext(System.String)">
            <summary>
            Opens a nested diagnostics context. Not supported in EntLib logging.
            </summary>
            <param name="message">The message to add to the diagnostics context.</param>
            <returns>A disposable that when disposed removes the message from the context.</returns>
        </member>
        <member name="M:IdentityServer3.WsFederation.Logging.ILogProvider.OpenMappedContext(System.String,System.String)">
            <summary>
            Opens a mapped diagnostics context. Not supported in EntLib logging.
            </summary>
            <param name="key">A key.</param>
            <param name="value">A value.</param>
            <returns>A disposable that when disposed removes the map from the context.</returns>
        </member>
        <member name="T:IdentityServer3.WsFederation.Logging.LogProvider">
            <summary>
            Provides a mechanism to create instances of <see cref="T:IdentityServer3.WsFederation.Logging.ILog"/> objects.
            </summary>
        </member>
        <member name="F:IdentityServer3.WsFederation.Logging.LogProvider.DisableLoggingEnvironmentVariable">
            <summary>
            The disable logging environment variable. If the environment variable is set to 'true', then logging
            will be disabled.
            </summary>
        </member>
        <member name="M:IdentityServer3.WsFederation.Logging.LogProvider.SetCurrentLogProvider(IdentityServer3.WsFederation.Logging.ILogProvider)">
            <summary>
            Sets the current log provider.
            </summary>
            <param name="logProvider">The log provider.</param>
        </member>
        <member name="M:IdentityServer3.WsFederation.Logging.LogProvider.For``1">
            <summary>
            Gets a logger for the specified type.
            </summary>
            <typeparam name="T">The type whose name will be used for the logger.</typeparam>
            <returns>An instance of <see cref="T:IdentityServer3.WsFederation.Logging.ILog"/></returns>
        </member>
        <member name="M:IdentityServer3.WsFederation.Logging.LogProvider.GetCurrentClassLogger">
            <summary>
            Gets a logger for the current class.
            </summary>
            <returns>An instance of <see cref="T:IdentityServer3.WsFederation.Logging.ILog"/></returns>
        </member>
        <member name="M:IdentityServer3.WsFederation.Logging.LogProvider.GetLogger(System.Type)">
            <summary>
            Gets a logger for the specified type.
            </summary>
            <param name="type">The type whose name will be used for the logger.</param>
            <returns>An instance of <see cref="T:IdentityServer3.WsFederation.Logging.ILog"/></returns>
        </member>
        <member name="M:IdentityServer3.WsFederation.Logging.LogProvider.GetLogger(System.String)">
            <summary>
            Gets a logger with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>An instance of <see cref="T:IdentityServer3.WsFederation.Logging.ILog"/></returns>
        </member>
        <member name="M:IdentityServer3.WsFederation.Logging.LogProvider.OpenNestedContext(System.String)">
            <summary>
            Opens a nested diagnostics context.
            </summary>
            <param name="message">A message.</param>
            <returns>An <see cref="T:System.IDisposable"/> that closes context when disposed.</returns>
        </member>
        <member name="M:IdentityServer3.WsFederation.Logging.LogProvider.OpenMappedContext(System.String,System.String)">
            <summary>
            Opens a mapped diagnostics context.
            </summary>
            <param name="key">A key.</param>
            <param name="value">A value.</param>
            <returns>An <see cref="T:System.IDisposable"/> that closes context when disposed.</returns>
        </member>
        <member name="P:IdentityServer3.WsFederation.Logging.LogProvider.IsDisabled">
            <summary>
            Gets or sets a value indicating whether this is logging is disabled.
            </summary>
            <value>
            <c>true</c> if logging is disabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IdentityServer3.WsFederation.Logging.LogProvider.OnCurrentLogProviderSet">
            <summary>
            Sets an action that is invoked when a consumer of your library has called SetCurrentLogProvider. It is 
            important that hook into this if you are using child libraries (especially ilmerged ones) that are using
            LibLog (or other logging abstraction) so you adapt and delegate to them.
            <see cref="M:IdentityServer3.WsFederation.Logging.LogProvider.SetCurrentLogProvider(IdentityServer3.WsFederation.Logging.ILogProvider)"/> 
            </summary>
        </member>
        <member name="P:IdentityServer3.WsFederation.Logging.LogProviders.LoupeLogProvider.ProviderIsAvailableOverride">
            <summary>
            Gets or sets a value indicating whether [provider is available override]. Used in tests.
            </summary>
            <value>
            <c>true</c> if [provider is available override]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:IdentityServer3.WsFederation.Logging.LogProviders.LoupeLogProvider.WriteDelegate">
            <summary>
            The form of the Loupe Log.Write method we're using
            </summary>
        </member>
        <member name="M:IdentityServer3.WsFederation.Logging.LogProviders.LogMessageFormatter.SimulateStructuredLogging(System.Func{System.String},System.Object[])">
            <summary>
            Some logging frameworks support structured logging, such as serilog. This will allow you to add names to structured data in a format string:
            For example: Log("Log message to {user}", user). This only works with serilog, but as the user of LibLog, you don't know if serilog is actually 
            used. So, this class simulates that. it will replace any text in {curly braces} with an index number. 
            
            "Log {message} to {user}" would turn into => "Log {0} to {1}". Then the format parameters are handled using regular .net string.Format.
            </summary>
            <param name="messageBuilder">The message builder.</param>
            <param name="formatParameters">The format parameters.</param>
            <returns></returns>
        </member>
        <member name="T:IdentityServer3.Core.Configuration.PluginAppBuilderExtensions">
            <summary>
            Extension methods for IAppBuilder to configure the WS-Federation plugin
            </summary>
        </member>
        <member name="M:IdentityServer3.Core.Configuration.PluginAppBuilderExtensions.UseWsFederationPlugin(Owin.IAppBuilder,IdentityServer3.WsFederation.Configuration.WsFederationPluginOptions)">
            <summary>
            Add the WS-Federation plugin to the IdentityServer pipeline.
            </summary>
            <param name="app">The appBuilder.</param>
            <param name="options">The options.</param>
            <returns>The appBuilder</returns>
            <exception cref="T:System.ArgumentNullException">options</exception>
        </member>
        <member name="T:IdentityServer3.WsFederation.Configuration.WsFederationPluginOptions">
            <summary>
            WS-Federation plugin options
            </summary>
        </member>
        <member name="F:IdentityServer3.WsFederation.Configuration.WsFederationPluginOptions.CookieName">
            <summary>
            The tracking cookie name
            </summary>
        </member>
        <member name="M:IdentityServer3.WsFederation.Configuration.WsFederationPluginOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IdentityServer3.WsFederation.Configuration.WsFederationPluginOptions"/> class.
            </summary>
        </member>
        <member name="M:IdentityServer3.WsFederation.Configuration.WsFederationPluginOptions.#ctor(IdentityServer3.Core.Configuration.IdentityServerOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:IdentityServer3.WsFederation.Configuration.WsFederationPluginOptions"/> class.
            Assigns the IdentityServerOptions and the Factory from the IdentityServerOptions.
            </summary>
            <param name="options">The options.</param>
            <exception cref="T:System.ArgumentNullException">options</exception>
        </member>
        <member name="M:IdentityServer3.WsFederation.Configuration.WsFederationPluginOptions.Validate">
            <summary>
            Validates this instance.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            Factory not configured
            or
            DataProtector not configured
            or
            Options not configured
            </exception>
        </member>
        <member name="P:IdentityServer3.WsFederation.Configuration.WsFederationPluginOptions.LogoutUrl">
            <summary>
            Gets the logout URL.
            </summary>
            <value>
            The logout URL.
            </value>
        </member>
        <member name="P:IdentityServer3.WsFederation.Configuration.WsFederationPluginOptions.IdentityServerOptions">
            <summary>
            Gets or sets the identity server options.
            </summary>
            <value>
            The identity server options.
            </value>
        </member>
        <member name="P:IdentityServer3.WsFederation.Configuration.WsFederationPluginOptions.Factory">
            <summary>
            Gets or sets the WS-Federation service factory.
            </summary>
            <value>
            The factory.
            </value>
        </member>
        <member name="P:IdentityServer3.WsFederation.Configuration.WsFederationPluginOptions.EnableMetadataEndpoint">
            <summary>
            Gets or sets a value indicating whether the metadata endpoint is enabled.
            </summary>
            <value>
            <c>true</c> if the metadata endpoint is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IdentityServer3.WsFederation.Configuration.WsFederationPluginOptions.DataProtector">
            <summary>
            Gets the data protector.
            </summary>
            <value>
            The data protector.
            </value>
        </member>
        <member name="P:IdentityServer3.WsFederation.Configuration.WsFederationPluginOptions.MapPath">
            <summary>
            Gets or sets the map path.
            </summary>
            <value>
            The map path.
            </value>
        </member>
        <member name="T:IdentityServer3.WsFederation.Configuration.WsFederationServiceFactory">
            <summary>
            The WS-Federation plugin service factory
            </summary>
        </member>
        <member name="M:IdentityServer3.WsFederation.Configuration.WsFederationServiceFactory.Register``1(IdentityServer3.Core.Configuration.Registration{``0})">
            <summary>
            Adds a registration to the dependency list
            </summary>
            <typeparam name="T">Type of the dependency</typeparam>
            <param name="registration">The registration.</param>
        </member>
        <member name="M:IdentityServer3.WsFederation.Configuration.WsFederationServiceFactory.#ctor(IdentityServer3.Core.Configuration.IdentityServerServiceFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:IdentityServer3.WsFederation.Configuration.WsFederationServiceFactory"/> class.
            </summary>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:IdentityServer3.WsFederation.Configuration.WsFederationServiceFactory.Validate">
            <summary>
            Validates this instance.
            </summary>
        </member>
        <member name="P:IdentityServer3.WsFederation.Configuration.WsFederationServiceFactory.Registrations">
            <summary>
            Gets the a list of additional dependencies.
            </summary>
            <value>
            The dependencies.
            </value>
        </member>
        <member name="P:IdentityServer3.WsFederation.Configuration.WsFederationServiceFactory.UserService">
            <summary>
            Gets or sets the user service.
            </summary>
            <value>
            The user service.
            </value>
        </member>
        <member name="P:IdentityServer3.WsFederation.Configuration.WsFederationServiceFactory.RelyingPartyService">
            <summary>
            Gets or sets the relying party service.
            </summary>
            <value>
            The relying party service.
            </value>
        </member>
        <member name="P:IdentityServer3.WsFederation.Configuration.WsFederationServiceFactory.CustomRequestValidator">
            <summary>
            Gets or sets the custom request validator service.
            </summary>
            <value>
            The custom request validator service.
            </value>
        </member>
        <member name="P:IdentityServer3.WsFederation.Configuration.WsFederationServiceFactory.RedirectUriValidator">
            <summary>
            Gets or sets the redirect URI validator service.
            </summary>
            <value>
            The redirect URI validator service.
            </value>
        </member>
        <member name="P:IdentityServer3.WsFederation.Configuration.WsFederationServiceFactory.CustomClaimsService">
            <summary>
            Gets or sets the custom claims service.
            </summary>
            <value>
            The custom claims service.
            </value>
        </member>
        <member name="T:IdentityServer3.WsFederation.Configuration.WsFederationServiceFactoryExtensions">
            <summary> 
            Extension methods for <see cref="T:IdentityServer3.WsFederation.Configuration.WsFederationServiceFactory"/> 
            </summary> 
        </member>
        <member name="M:IdentityServer3.WsFederation.Configuration.WsFederationServiceFactoryExtensions.UseInMemoryRelyingParties(IdentityServer3.WsFederation.Configuration.WsFederationServiceFactory,System.Collections.Generic.IEnumerable{IdentityServer3.WsFederation.Models.RelyingParty})">
            <summary> 
            Configures the factory to use in-memory relying parties. 
            </summary> 
            <param name="factory">The factory.</param> 
            <param name="relyingParties">The relying parties.</param> 
            <returns></returns> 
        </member>
        <member name="M:IdentityServer3.WsFederation.Logging.LogSerializer.Serialize(System.Object)">
            <summary>
            Serializes the specified object.
            </summary>
            <param name="logObject">The object.</param>
            <returns></returns>
        </member>
        <member name="T:IdentityServer3.WsFederation.Models.RelyingParty">
            <summary>
            Models a WS-Federation relying party
            </summary>
        </member>
        <member name="M:IdentityServer3.WsFederation.Models.RelyingParty.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IdentityServer3.WsFederation.Models.RelyingParty"/> class.
            </summary>
        </member>
        <member name="P:IdentityServer3.WsFederation.Models.RelyingParty.Name">
            <summary>
            Gets or sets the display name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:IdentityServer3.WsFederation.Models.RelyingParty.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:IdentityServer3.WsFederation.Models.RelyingParty"/> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IdentityServer3.WsFederation.Models.RelyingParty.Realm">
            <summary>
            Gets or sets the realm.
            </summary>
            <value>
            The realm.
            </value>
        </member>
        <member name="P:IdentityServer3.WsFederation.Models.RelyingParty.ReplyUrl">
            <summary>
            Gets or sets the reply URL.
            </summary>
            <value>
            The reply URL.
            </value>
        </member>
        <member name="P:IdentityServer3.WsFederation.Models.RelyingParty.TokenType">
            <summary>
            Gets or sets the type of the token.
            </summary>
            <value>
            The type of the token.
            </value>
        </member>
        <member name="P:IdentityServer3.WsFederation.Models.RelyingParty.TokenLifeTime">
            <summary>
            Gets or sets the token life time in minutes.
            </summary>
            <value>
            The token life time.
            </value>
        </member>
        <member name="P:IdentityServer3.WsFederation.Models.RelyingParty.EncryptingCertificate">
            <summary>
            Gets or sets the encrypting certificate.
            </summary>
            <value>
            The encrypting certificate.
            </value>
        </member>
        <member name="P:IdentityServer3.WsFederation.Models.RelyingParty.IncludeAllClaimsForUser">
            <summary>
            Gets or sets a value indicating whether to include all claims for the user in the token.
            </summary>
            <value>
            <c>true</c> if include all claims for user; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IdentityServer3.WsFederation.Models.RelyingParty.DefaultClaimTypeMappingPrefix">
            <summary>
            Gets or sets the default claim type mapping prefix.
            </summary>
            <value>
            The default claim type mapping prefix.
            </value>
        </member>
        <member name="P:IdentityServer3.WsFederation.Models.RelyingParty.SamlNameIdentifierFormat">
            <summary>
            Gets or sets the name identifier format (SAML only).
            </summary>
            <value>
            The SAML name identifier format.
            </value>
        </member>
        <member name="P:IdentityServer3.WsFederation.Models.RelyingParty.ClaimMappings">
            <summary>
            Gets or sets the claim mappings.
            </summary>
            <value>
            The claim mappings.
            </value>
        </member>
        <member name="P:IdentityServer3.WsFederation.Models.RelyingParty.SignatureAlgorithm">
            <summary>
            Gets or sets the tokenn signature algorithm.
            </summary>
            <value>
            The signature algorithm.
            </value>
        </member>
        <member name="P:IdentityServer3.WsFederation.Models.RelyingParty.DigestAlgorithm">
            <summary>
            Gets or sets the digest algorithm.
            </summary>
            <value>
            The digest algorithm.
            </value>
        </member>
        <member name="P:IdentityServer3.WsFederation.Models.RelyingParty.PostLogoutRedirectUris">
            <summary>
            Specifies allowed URIs to redirect to after logout
            </summary>
        </member>
        <member name="T:IdentityServer3.WsFederation.Services.DefaultCustomWsFederationClaimsService">
            <summary>
            Default custom request validator
            </summary>
        </member>
        <member name="T:IdentityServer3.WsFederation.Services.ICustomWsFederationClaimsService">
            <summary>
            Implements custom transformation of claims before they are sent back to relying party
            </summary>
        </member>
        <member name="M:IdentityServer3.WsFederation.Services.ICustomWsFederationClaimsService.TransformClaimsAsync(IdentityServer3.WsFederation.Validation.SignInValidationResult,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <summary>
            Transforms claims before they are sent back to relying party in response to sign in.
            </summary>
            <param name="validationResult">The validated request.</param>
            <param name="mappedClaims">Suggested claims</param>
            <returns>Final claims to include in response to relying party</returns>
        </member>
        <member name="M:IdentityServer3.WsFederation.Services.DefaultCustomWsFederationClaimsService.TransformClaimsAsync(IdentityServer3.WsFederation.Validation.SignInValidationResult,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <summary>
            Transforms claims before they are sent back to relying party in response to sign in.
            </summary>
            <param name="validationResult">The validated request.</param>
            <param name="mappedClaims">Suggested claims</param>
            <returns>Final claims to include in response</returns>
        </member>
        <member name="T:IdentityServer3.WsFederation.Services.DefaultCustomWsFederationRequestValidator">
            <summary>
            Default custom request validator
            </summary>
        </member>
        <member name="T:IdentityServer3.WsFederation.Services.ICustomWsFederationRequestValidator">
            <summary>
            Allows inserting custom validation logic into sign in requests
            </summary>
        </member>
        <member name="M:IdentityServer3.WsFederation.Services.ICustomWsFederationRequestValidator.ValidateSignInRequestAsync(IdentityServer3.WsFederation.Validation.SignInValidationResult)">
            <summary>
            Custom validation logic for the sign in request.
            </summary>
            <param name="request">The validated request.</param>
            <returns>The validation result</returns>
        </member>
        <member name="M:IdentityServer3.WsFederation.Services.DefaultCustomWsFederationRequestValidator.ValidateSignInRequestAsync(IdentityServer3.WsFederation.Validation.SignInValidationResult)">
            <summary>
            Custom validation logic for the sign in request.
            </summary>
            <param name="request">The validated request.</param>
            <returns>The validation result</returns>
        </member>
        <member name="T:IdentityServer3.WsFederation.Services.DefaultRedirectUriValidator">
            <summary>
            Default implementation of redirect URI validator. Validates the URIs against
            the trusted URIs configured in the plugin options
            </summary>
        </member>
        <member name="T:IdentityServer3.WsFederation.Services.IRedirectUriValidator">
            <summary>
             Models the logic when validating post logout redirect URIs.
            </summary>
        </member>
        <member name="M:IdentityServer3.WsFederation.Services.IRedirectUriValidator.IsPostLogoutRedirectUriValidAsync(System.String,IdentityServer3.WsFederation.Models.RelyingParty)">
            <summary>
            Determines whether a post logout URI is valid.
            </summary>
            <param name="requestedUri">The requested URI.</param>
            <param name="relyingParty"></param>
            <returns>
              <c>true</c> is the URI is valid; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:IdentityServer3.WsFederation.Services.DefaultRedirectUriValidator.StringCollectionContainsString(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Checks if a given URI string is in a collection of strings (using ordinal ignore case comparison)
            </summary>
            <param name="uris">The uris.</param>
            <param name="requestedUri">The requested URI.</param>
            <returns></returns>
        </member>
        <member name="M:IdentityServer3.WsFederation.Services.DefaultRedirectUriValidator.IsPostLogoutRedirectUriValidAsync(System.String,IdentityServer3.WsFederation.Models.RelyingParty)">
            <summary>
            Determines whether a post logout URI is valid.
            </summary>
            <param name="requestedUri">The requested URI.</param>
            <param name="relyingParty"></param>
            <returns>
              <c>true</c> is the URI is valid; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:IdentityServer3.WsFederation.Services.InMemoryRelyingPartyService">
            <summary>
            In-memory service for relying party configuration
            </summary>
        </member>
        <member name="T:IdentityServer3.WsFederation.Services.IRelyingPartyService">
            <summary>
            Implements retrieval of relying party configuration
            </summary>
        </member>
        <member name="M:IdentityServer3.WsFederation.Services.IRelyingPartyService.GetByRealmAsync(System.String)">
            <summary>
            Retrieves a relying party by realm.
            </summary>
            <param name="realm">The realm.</param>
            <returns>The relying party</returns>
        </member>
        <member name="M:IdentityServer3.WsFederation.Services.InMemoryRelyingPartyService.#ctor(System.Collections.Generic.IEnumerable{IdentityServer3.WsFederation.Models.RelyingParty})">
            <summary>
            Initializes a new instance of the <see cref="T:IdentityServer3.WsFederation.Services.InMemoryRelyingPartyService"/> class.
            </summary>
            <param name="rps">The RPS.</param>
        </member>
        <member name="M:IdentityServer3.WsFederation.Services.InMemoryRelyingPartyService.GetByRealmAsync(System.String)">
            <summary>
            Retrieves a relying party by realm.
            </summary>
            <param name="realm">The realm.</param>
            <returns>
            The relying party
            </returns>
        </member>
    </members>
</doc>
